
도메인 연관관계에서 다대다 연관관계는 사용해서는 안됨.

* @JoinColumn을 꼭 사용해야함. 그렇지 않으면 조인 테이블 방식(중간 연결 테이블 추가.)을 사용함.
 (성능 / 유지 관리에 어려움이 있어 조인 테이블 방식을 사용하지 않음.)

* 연관관계 주인설정 시 혼란을 줄이기 위해,
  DB Table에 FK가 포함되어 있는 객체를 주인으로 설정함.
  (관계형 DB에서는 다대일인 경우 다 쪽에 FK를 포함한다. ->
    -> 반대의 경우 말이되지 않음. : Team / Member의 경우 Team에 FK(Member ID)를 포함하게되면,
     Member별로 Team을 추가해야하는 이상한 상황이 생김.)


* 일대 다 단방향(웬만하면 쓰면안됨.  - 객체와 업데이트 되는 테이블이 매칭되지 않아 혼란스러움.)
 - FK가 포함하지 않는 객체를 주인으로 설정하는 경우.
 - 일대다 관계만 필요하더라도, 다대일 양방향 관계를 만들어 혼란을 줄임.
  ( 객체지향 관점에서는 불필요한 관계가 연관관계가 생겨 안좋지만, 유지 보수 시 혼란을 줄이기때문에 선호됨.)

* 일대 다 양방향
 - 예제에 member쪽에 읽기전용으로 강제화 하는 방법이 있음. (어렵게... 이런매핑은 공식적으로 존재X)

* 일대일 관계
- 주 테이블이나 대상 테이블 중 외래키 선택가능.
- DB입장에서는 데이터베이스 유니크(UNI) 제약 조건 추가.
- 다대일 단방향과 유사함.

* 다대다 관계(사용하면 안됨 - 복잡도가 많이 증가하고 유지하기 힘듬.)
- 객체는 컬렉션을 사용해서 객체 2개로 다대다 관계 가능.
- 관계형 데이터베이스는 정규화된 테이블 2개로 다대다 관계를 표현할수 없음.
  편법으로 연결테이블을 추가해서 일대다, 다대일 관계로 풀어내어야함.
   ex: Member(1) - (다)Member_Product(Member FK / Product FK) (다) - Product(1)
- Join Table사용.
- 다대다 한계극복 방법 -> 연결 테이블용 엔티티를 추가하여, 객체와 테이블을 동일하게 만듬.


양방향 연간관계의 경우 DB / 객체 지향 패러다음 사이에 차이가 있음.

- DB의 경우 하나의 FK를 이용하면 양방향 관계를 맺을 수 있음.
- 객체 양방향 관계를 위해 객체간 각각의 레퍼런스가 필요함.

JPA(ORM)의 경우, 객체지향 패러다임과 DB패러다임 사이에 연결을 해주어야하는데,
이때 양방향 관계 매핑을 처리하기 위한 연관관계 주인 개념이 필요하다.

객체지향의 경우 양방향 관계를 맺기 위해 각각의 레퍼런스를 가지고 있는데, 이때 주인을 정하지 않는 경우
어떤 기준으로 FK 를 관리할지 정할 수 없으므로 mappedby를 이용해 지정해야함.
* ex: 클래스 A / B가 아래와 같이 일대일 관계라고 했을때,
A a1 = new A;
A a2 = new A;
B b1 = new B;

//아래처럼 관계를 설정하는 경우 jpa(ORM)이
 어느것을 기준으로 FK설정을 해야할지 알수 없음.
 서로 다른 객체를 참조하고 있음. 이 때 연관관계 주인을 정해주게 되면,
 명확하게 어느 객체를 기준으로 FK설정을 할지 정할 수 있게됨.
b1->setA(a1);
a2->setB(b1);
class A {
 B refB;
 }

class B {
 A refA;
 }
